' Gambas class file

Private contenido As String
Private hFile As File

Public Sub Form_Open()

  Dim fecha As String

  fecha = Format(Date(), "yyyymmdd") ' Obtener la fecha actual

  txtFecha.Text = fecha

End

Public Sub btnBuscar_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.docx", ("Archivos word"), ("Todos los archivos")]
  Dialog.AutoExt = True
  Dialog.Path = User.Home
  If Dialog.OpenFile() Then
    Return
  Else
    If Not Exist(File.Dir(Dialog.Path) & "/originales") Then
      Mkdir File.Dir(Dialog.Path) & "/originales"
    End If
    If Not Exist(File.Dir(Dialog.Path) & "/media") Then
      Mkdir File.Dir(Dialog.Path) & "/media"
    End If
    txtORIGEN.Text = Dialog.Path
    btnCONVERTIR.Enabled = True
  Endif
Catch
  Message.Error("No se pudo abrir el archivo")

End

Public Sub Form_Close()

  Me.Close()

End

Public Sub btnSalir_Click()

  Me.Close()

End

Public Sub btnListo_Click()

  Me.Close()

End

Public Sub btnCONVERTIR_Click()

  txtORIGEN.Text = Dialog.Path
  Dim rutaOrigen As String = txtORIGEN.Text

  ' Validación del campo destino
  If Trim(txtDESTINO.Text) = "" Then
    Message.Error("El campo de Destino no puede estar vacío", "Cancelar")
    Return
  Endif

  ' Configuración de rutas
  Dim rutaFILTROLUA As String = Quote$(User.Home & "/.gbtexpublisher/filtro.lua")
  Dim mediaDir As String = Quote$(File.Dir(rutaOrigen) & "/media")
  Dim archivoFinal As String = Quote$(File.Dir(rutaOrigen) & "/" & txtFecha.Text & txtDESTINO.Text & ".tex")

  ' Ejecutar pandoc
  Shell "pandoc " & Quote$(rutaOrigen) & " -o " & archivoFinal & " --lua-filter=" & rutaFILTROLUA & " --from=docx --to=latex --wrap=none --extract-media=" & mediaDir Wait

  ' Ruta base sin comillas para operaciones de archivo
  Dim rutaBase As String = File.Dir(rutaOrigen) & "/" & txtFecha.Text & txtDESTINO.Text & ".tex"

  ' Verificar si el archivo se generó correctamente
  If Not Exist(rutaBase) Then
    Message.Error("El archivo no se pudo generar")
    Return
  Endif

  ' Cargar contenido del archivo generado
  contenido = File.Load(rutaBase)
  If Error Then
    Message.Error("Error al leer el archivo generado: " & Error.Text)
    Return
  Endif

  ' Reescribir el archivo con cabecera y pie
  hFile = Open rutaBase For Write
  If Error Then
    Message.Error("Error al abrir el archivo para escribir: " & Error.Text)
    Return
  Endif

  ' Escribir cabecera
  Print #hFile, "%  archivo con cabecera para libros, compilar con LuaLaTeX"
  Print #hFile, "%  esta cabecera debe borrarse para trabajar con gbtexpublisher"
  Print #hFile, ""
  Print #hFile, "\\documentclass{book}"
  Print #hFile, "\\usepackage[spanish]{babel}"
  Print #hFile, "\\usepackage{fontspec}"
  Print #hFile, "\\setmainfont{Libertinus Serif}"
  Print #hFile, "\\usepackage{graphicx}"
  Print #hFile, "\\usepackage{xcolor}"
  Print #hFile, "\\usepackage{longtable}"
  Print #hFile, "\\usepackage{caption}"
  Print #hFile, "\\usepackage{hyperref}"
  Print #hFile, ""
  Print #hFile, "\\begin{document}"
  Print #hFile, "\\frontmatter"
  Print #hFile, ""

  ' Escribir contenido original
  Print #hFile, contenido

  ' Escribir pie
  Print #hFile, ""
  Print #hFile, "\\end{document}"

  Close #hFile
  If Error Then
    Message.Error("Error al escribir el archivo: " & Error.Text)
    Return
  Endif

  ' Crear directorio "originales" si no existe
  Dim dirOriginales As String = File.Dir(rutaOrigen) & "/originales"
  If Not Exist(dirOriginales) Then
    Mkdir dirOriginales
    If Error Then
      Message.Error("No se pudo crear el directorio originales: " & Error.Text)
      Return
    Endif
  Endif

  ' Mover archivo original a carpeta "originales"
  Dim destinoOriginal As String = Quote$(dirOriginales & "/" & File.Name(rutaOrigen))
  Shell "mv " & Quote$(rutaOrigen) & " " & destinoOriginal Wait
  If Error Then
    Message.Error("Error al mover el archivo original: " & Error.Text)
    Return
  Endif

  ' Actualizar interfaz
  btnListo.Visible = True
  btnListo.Default = True
  btnSalir.Visible = False

End Sub

' Public Sub btnCONVERTIR_Click()
'
'   txtORIGEN.Text = Dialog.Path
'
'   Dim rutaOrigen As String = txtORIGEN.Text
'
'   If Trim(txtDESTINO.Text) = "" Then
'     Message.Error("El campo de Destino no puede estar vacío", "Cancelar")
'   Else
'     Dim rutaFILTROLUA As String = Quote$(User.Home & "/.gbtexpublisher/filtro.lua")
'     Dim mediaDir As String = Quote$(File.Dir(rutaOrigen) & "/media")
'     Dim archivoFinal As String
'     archivoFinal = Quote$(File.Dir(rutaOrigen) & "/" & txtFecha.Text & txtDESTINO.Text & ".tex")
'
'     Shell "pandoc " & Quote$(rutaOrigen) & " -o " & archivoFinal & " --lua-filter=" & rutaFILTROLUA & " --from=docx --to=latex --wrap=none --extract-media=" & mediaDir Wait
'
'     ' Solo aplicar el formato LaTeX si se seleccionó TEX
'     Dim rutaBase As String = File.Dir(rutaOrigen) & "/" & txtFecha.Text & txtDESTINO.Text & ".tex"
'
'     ' Verifica y carga el archivo (usa rutaBase SIN comillas)
'     If Not File.RealPath(rutaBase) Then
'       Message.Error("El archivo no se pudo generar")
'     Else
'       contenido = File.Load(rutaBase)  ' ¡Sin Quote$() aquí!
'     End If
'
'     ' Paso 2: Abrir el archivo original para SOBREESCRIBIRLO con el contenido modificado
'     Dim hFile As File
'     hFile = Open rutaBase For Write
'
'     ' Paso 3: Escribir cabecera
'     Print #hFile, "%  archivo con cabecera para libros, compilar con LuaLaTeX"
'     Print #hFile, "%  esta cabecera debe borrarse para trabajar con gbtexpublisher"
'     Print #hFile, ""
'     Print #hFile, "\\documentclass{book}"
'     Print #hFile, "\\usepackage[spanish]{babel}"
'     Print #hFile, "\\usepackage{fontspec}"
'     Print #hFile, "\\setmainfont{Libertinus Serif}"
'     Print #hFile, "\\usepackage{graphicx}"
'     Print #hFile, "\\usepackage{xcolor}"
'     Print #hFile, "\\usepackage{longtable}"
'     Print #hFile, "\\usepackage{caption}"
'     Print #hFile, "\\usepackage{hyperref}"
'     Print #hFile, ""
'     Print #hFile, "\\begin{document}"
'     Print #hFile, "\\frontmatter"
'     Print #hFile, ""
'
'     ' Paso 4: Escribir contenido original
'     Print #hFile, contenido
'
'     ' Paso 5: Escribir pie
'     Print #hFile, ""
'     Print #hFile, "\\end{document}"
'
'     ' Paso 6: Cerrar el archivo
'     Close #hFile
'   Endif
'
'   ' Mueve el archivo de origen a la carpeta "originales" usando el comando mv
'   Dim destinoOriginal As String = Quote$(File.Dir(rutaOrigen) & "/originales/" & File.Name(rutaOrigen))
'   Shell "mv " & Quote$(rutaOrigen) & " " & destinoOriginal Wait
'   btnListo.Visible = True
'   btnListo.Default = True
'   btnSalir.Visible = False
' Endif
' Endif
'
' ' Mueve el archivo de origen a la carpeta "originales" usando el comando mv
' Dim destinoOriginalRTF As String = Quote$(File.Dir(rutaOrigen) & "/originales/" & File.Name(rutaOrigen))
' Shell "mv " & Quote$(rutaOrigen) & " " & destinoOriginalRTF Wait
'
' btnListo.Visible = True
' btnListo.Default = True
' btnSalir.Visible = False
'
' End

Public Sub txtDESTINO_KeyRelease()
  ' Obtener el texto actual del TextBox

  Dim texto As String

  texto = txtDESTINO.Text

  ' Lista de caracteres permitidos
  Dim caracteresPermitidos As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

  ' Filtrar el texto para eliminar caracteres no permitidos
  Dim textoFiltrado As String
  For i As Integer = 1 To Len(texto)
    Dim tecla As String
    tecla = Mid(texto, i, 1)
    If InStr(caracteresPermitidos, tecla) > 0 Then
      textoFiltrado = textoFiltrado & tecla
    End If
  Next

  ' Limitar la longitud del texto a 11 caracteres
  If Len(textoFiltrado) > 20 Then
    ' Mostrar un mensaje de aviso
    Message.Warning("El nombre de salida del archivo no puede contener más de 20 caracteres.", "Entendido")
    ' Eliminar los caracteres adicionales
    txtDESTINO.Text = Left(textoFiltrado, 20)
  Else
    ' Actualizar el TextBox con el texto filtrado y convertirlo a mayúsculas
    txtDESTINO.Text = UCase(textoFiltrado)
  End If

End
