' Gambas class file

' Private destino As String = File.Dir(Dialog.Path) &/ txtFecha.Text & txtDESTINO.Text & ".tex"
Private rutaORIGINALES As String = File.Dir(Dialog.Path) &/ "originales"
Private rutaMEDIA As String = File.Dir(Dialog.Path) &/ "media"
Private contenido As String

Public Sub Form_Open()

  Dim fecha As String

  fecha = Format(Date(), "yyyymmdd") ' Obtener la fecha actual

  txtFecha.Text = fecha

End

Public Sub btnBuscar_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.docx", ("Archivos word"), "*.rtf", ("Archivos rtf"), "*", ("Todos los archivos")]
  Dialog.AutoExt = True
  Dialog.Path = User.Home
  If Dialog.OpenFile() Then
    Return
  Else
    txtORIGEN.Text = Dialog.Path
    btnCONVERTIR.Enabled = True
  Endif

Catch
  Message.Error("No se pudo abrir el archivo")

End

Public Sub Form_Close()

  Me.Close()

End

Public Sub btnSalir_Click()

  Me.Close()

End

Public Sub btnListo_Click()

  Me.Close()

End

Public Sub btnCONVERTIR_Click()

  ' Escapa las rutas de origen y destino
  Dim escapedPath As String = EscapePath(Dialog.Path)
  Dim escapedOriginalesPath As String = EscapePath(rutaORIGINALES &/ File.Name(Dialog.Path))

  txtORIGEN.Text = Dialog.Path

  If Not Exist(rutaORIGINALES) Then
    Mkdir rutaORIGINALES
  End If

  If Not Exist(rutaMEDIA) Then
    Mkdir rutaMEDIA
  End If

  ' conversion desde un archivo docx
  Dim archivoFinal As String = File.Dir(Dialog.Path) &/ txtFecha.Text & txtDESTINO.Text & ".tex"
  If RadioButton1.Value = True And RadioButton2.Value = False And RadioButton3.Value = False Then
    If Trim(txtDESTINO.Text) = "" Then
      Message.Error("El campo de Destino no puede estar vacío", "Cancelar")
    Else
      Dim rutaFILTROLUA As String = User.Home &/ ".gbtexpublisher/filtro.lua"
      ' ' Ejecuta el comando Pandoc para convertir el archivo DOCX a LaTeX
      Shell "pandoc " & Quote$(Dialog.Path) & " -o " & Quote$(archivoFinal) & " --lua-filter=" & rutaFILTROLUA & " --from=docx --to=latex --wrap=none --extract-media=" & rutaMEDIA Wait

      ' Paso 1: Leer el archivo generado por Pandoc
      contenido = File.Load(archivoFinal)

      ' Paso 2: Abrir el archivo original para SOBREESCRIBIRLO con el contenido modificado
      Dim hFile As File
      hFile = Open archivoFinal For Write

      ' Paso 3: Escribir cabecera
      Print #hFile, "%  archivo con cabecera para libros, compilar con LuaLaTeX"
      Print #hFile, ""
      Print #hFile, "\\documentclass{book}"
      Print #hFile, "\\usepackage[spanish]{babel}"
      Print #hFile, "\\usepackage{fontspec}"
      Print #hFile, "\\setmainfont{Libertinus Serif}"
      Print #hFile, "\\usepackage{graphicx}"
      Print #hFile, "\\usepackage{xcolor}"
      Print #hFile, "\\usepackage{longtable}"
      Print #hFile, "\\usepackage{caption}"
      Print #hFile, "\\usepackage{hyperref}"
      Print #hFile, ""
      Print #hFile, "\\begin{document}"
      Print #hFile, "\\frontmatter"
      Print #hFile, ""

      ' Paso 4: Escribir contenido original
      Print #hFile, contenido

      ' Paso 5: Escribir pie
      Print #hFile, ""
      Print #hFile, "\\end{document}"

      ' Paso 6: Cerrar el archivo
      Close #hFile

      ' Mueve el archivo de origen a la carpeta "originales" usando el comando mv
      Shell "mv " & escapedPath & " " & escapedOriginalesPath Wait
      btnListo.Visible = True
      btnListo.Default = True
      btnSalir.Visible = False
    Endif
  Endif

  ' conversión desde un archivo rtf
  Dim archivoFinalRTF As String = File.Dir(Dialog.Path) &/ txtFecha.Text & txtDESTINO.Text & ".tex"
  If RadioButton3.Value And Not RadioButton1.Value And Not RadioButton2.Value Then
    If Trim(txtDESTINO.Text) = "" Then
      Message.Error("El campo de Destino no puede estar vacío", "Cancelar")
    Else

      ' Ejecutar pandoc con manejo de errores
      Shell "pandoc " & Quote$(Dialog.Path) & " -o " & Quote$(archivoFinalRTF) & " --from=rtf --to=latex --wrap=none --extract-media=" & rutaMEDIA Wait

      ' Leer el contenido generado
      contenido = File.Load(archivoFinalRTF)

      ' Escribir el nuevo contenido con cabecera y pie
      Dim hFileRTF As File
      hFileRTF = Open archivoFinalRTF For Write

      Print #hFileRTF, "%  archivo con cabecera para libros, compilar con LuaLaTeX"
      Print #hFileRTF, ""
      Print #hFileRTF, "\\documentclass{book}"
      Print #hFileRTF, "\\usepackage[spanish]{babel}"
      Print #hFileRTF, "\\usepackage{fontspec}"
      Print #hFileRTF, "\\setmainfont{Libertinus Serif}"
      Print #hFileRTF, "\\usepackage{graphicx}"
      Print #hFileRTF, "\\usepackage{xcolor}"
      Print #hFileRTF, "\\usepackage{longtable}"
      Print #hFileRTF, "\\usepackage{caption}"
      Print #hFileRTF, "\\usepackage{hyperref}"
      Print #hFileRTF, ""
      Print #hFileRTF, "\\begin{document}"
      Print #hFileRTF, "\\frontmatter"
      Print #hFileRTF, ""
      Print #hFileRTF, contenido
      Print #hFileRTF, ""
      Print #hFileRTF, "\\end{document}"

      Close #hFileRTF

      Shell "mv " & escapedPath & " " & escapedOriginalesPath Wait

      btnListo.Visible = True
      btnListo.Default = True
      btnSalir.Visible = False
    End If
  Endif

  ' conversion usando doc2tex
  Dim hprocess As Process
  If RadioButton2.Value = True And RadioButton1.Value = False And RadioButton3.Value = False Then
    If Trim(txtDESTINO.Text) = "" Then
      Message.Error("El campo de Destino no puede estar vacío", "Cancelar")
    Else
      hprocess = Shell User.Home &/ "docx2tex/d2t " & txtORIGEN.Text Wait
      Do While hprocess.state = Process.Running
        Wait 0.2
      Loop
      Shell "mv " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".docx.tmp/word/media" & " " & File.Dir(Dialog.Path) Wait
      Shell "rm -r " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".xml" Wait
      Shell "rm -r " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".csv" Wait
      Shell "rm -r " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".d2t.log" Wait
      Shell "rm -r " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".debug" Wait
      Shell "rm -r " & File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".docx.tmp" Wait
      Shell "mv " & File.Dir(Dialog.Path) &/ File.Name(Dialog.Path) & " " & rutaORIGINALES Wait
    Endif
    If hprocess.State = Process.Stopped Then
      btnCONVERTIR.Enabled = False
      btnListo.Visible = True
      btnSalir.Visible = False
    Endif
  Endif

End

Private Function EscapePath(path As String) As String

  Return "'" & Replace(path, "'", "'\\''") & "'"

End

Public Sub txtDESTINO_KeyRelease()
  ' Obtener el texto actual del TextBox

  Dim texto As String

  texto = txtDESTINO.Text

  ' Lista de caracteres permitidos
  Dim caracteresPermitidos As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

  ' Filtrar el texto para eliminar caracteres no permitidos
  Dim textoFiltrado As String
  For i As Integer = 1 To Len(texto)
    Dim tecla As String
    tecla = Mid(texto, i, 1)
    If InStr(caracteresPermitidos, tecla) > 0 Then
      textoFiltrado = textoFiltrado & tecla
    End If
  Next

  ' Limitar la longitud del texto a 11 caracteres
  If Len(textoFiltrado) > 20 Then
    ' Mostrar un mensaje de aviso
    Message.Warning("El nombre de salida del archivo no puede contener más de 20 caracteres.", "Entendido")
    ' Eliminar los caracteres adicionales
    txtDESTINO.Text = Left(textoFiltrado, 20)
  Else
    ' Actualizar el TextBox con el texto filtrado y convertirlo a mayúsculas
    txtDESTINO.Text = UCase(textoFiltrado)
  End If

End
